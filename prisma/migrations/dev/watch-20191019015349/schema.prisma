generator photon {
  provider = "photonjs"
}

datasource db {
  provider = "postgresql"
  url = "***"
}

// ###############################################################################################################
// USER
// ###############################################################################################################

model User {
    id                      String         		@id @default(uuid())
    createdAt               DateTime    		@default(now())
    updatedAt               DateTime    		@updatedAt

    firstname               String
    lastname                String
    email                   String 				@unique
    emailVerified           Boolean				@default(false)
    password				String
    
    group					UserGroup			@default(PUBLIC)
    groupRequest			UserGroup?

    isAdmin					Boolean 			@default(false)
    roles 					Role[]				@relation(name: "UserRoles")
    
    avatar					String?
    addresses				Address[] 			@relation(name: "UserAddress", onDelete: CASCADE)
    devices					Device[] 			@relation(name: "UserDevices", onDelete: CASCADE)
    officialDocuments		OfficialDocument[]	@relation(name: "UserOfficialDocuments", onDelete: CASCADE)
    socialNetworkLinks		SocialLink[]	 	@relation(name: "UserSocialNetworks", onDelete: CASCADE)
    metadata				String

    department				Department          @relation(name: "DepartmentMembers", onDelete: NONE)

    newses                  News[]              @relation(name: "UserNewses", onDelete: CASCADE)
    events                  Event[]             @relation(name: "UserEvents", onDelete: CASCADE)

    matriculas              Matricula[]         @relation(name: "AlumnoMatriculas", onDelete: CASCADE)
    asistencias             Asistencia[]        @relation(name: "EstudianteAsistencias", onDelete: CASCADE)

    leccionesGestionadas    Leccion[]           @relation(name: "LeccionGestor")
    leccionesDisponibles    Leccion[]           @relation(name: "ProfesoresLecciones", onDelete: CASCADE)
    sesiones                Sesion[]            @relation(name: "SesionesEjecutadas", onDelete: CASCADE)

    orders                  Order[]             @relation(name: "CustomerOrders", onDelete: NONE)
    discountRequests        DiscountRequest[]   @relation(name: "UserDiscountRequests", onDelete: CASCADE)
}

enum UserGroup {
    ESTUDIANTE
    STAFF
    GENERAL
}

enum OfficialDocumentType {
    NATIONALID
    PASSPORT
    SOCIALSECURITY
    DRIVINGLICENSE
    OTHER
}

model Role {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    name                    String
    users                   User[]              @relation(name: "UserRoles")
}

model SocialLink {
    id                      String              @id @default(uuid())
    link                    String              @unique
    socialNetwork           SocialNetwork       @relation(name: "LinkSocialNetwork", onDelete: NONE)
    owner                   User                @relation(name: "UserSocialNetworks", onDelete: NONE)
}

model SocialNetwork {
    id                      String              @id @default(uuid())
    name                    String
    baseURL                 String
    ownURL                  String
    userLinks               SocialLink[]        @relation(name: "LinkSocialNetwork", onDelete: CASCADE)
}

model OfficialDocument {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    number                  String              @unique
    type                    OfficialDocumentType @default(NATIONALID)
    other                   String?
    expiration              DateTime
    owner                   User                @relation(name: "UserOfficialDocuments", onDelete: NONE)
}

model Address {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    owner                   User                @relation(name: "UserAddress", onDelete: NONE)
    address1                String
    address2                String?
    city                    String?
    region                  String
    country                 String
    code                    String
    primary                 Boolean             @default(false)
}

enum DeviceType {
    PHONE
    TABLET
    OTHER
}

model Device {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    owner                   User                @relation(name: "UserDevices", onDelete: NONE)
    countryCode             String?
    number                  String?
    type                    DeviceType          @default(PHONE)

    notificationsDevice     String              @unique                                     // external ID from expo:
    notificationsPermission Boolean             @default(true)
    verified                Boolean             @default(false)
}

model Department {
    id                      String              @id @default(uuid())
    name                    String
    members                 User[]              @relation(name: "DepartmentMembers", onDelete: NONE)
}

// ###############################################################################################################
// ACADEMIC
// ###############################################################################################################

model Estudio {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    name                    String              @unique
    shortName               String              @unique
    description             String?

    titulaciones            Titulacion[]        @relation(name: "EstudioTitulaciones", onDelete: CASCADE)
}

model Titulacion {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    name                    String              @unique
    shortName               String              @unique
    code                    String              @unique
    description             String?

    estudio                 Estudio             @relation(name: "EstudioTitulaciones", onDelete: NONE)
    asignaturas             Asignatura[]        @relation(name: "TitulacionAsignaturas", onDelete: CASCADE)
}

enum Semestre {
    SEMESTRE_1
    SEMESTRE_2
    ANUAL
}

model Asignatura {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    name                    String              @unique
    shortName               String              @unique
    code                    String              @unique
    description             String?
    spacerequirements       String?
    creditosECTS            Int                 @default(0)
    horasTotalesPresenciales Int                @default(0)    // calc multiplying creaditos * ratio
    horasSemanasPresenciales Int                @default(0)    // calc division de horas totales segun semestre
    horasSemanasPlanificadas Int                @default(0)    // numero de horas planificadas a la semana
    horasTotalesPlanificadas Int                @default(0)    // total de horas de la planificacion 
    horasBalance            Int                 @default(0)     // diferencia entre horasTotalesPresenciales y estadoRealHorasTotalesPlanificadas

    titulacion              Titulacion          @relation(name: "TitulacionAsignaturas", onDelete: NONE)
    curso                   Curso               @relation(name: "CursoAsignaturas", onDelete: NONE)
    desdobles               Desdoble[]          @relation(name: "AsignaturaDesdobles", onDelete: CASCADE)
    semsestre               Semestre            @default(SEMESTRE_1)
    ratio                   Ratio               @relation(name: "RatioAsignaturas", onDelete: NONE)
}

model Ratio {
    id                      String              @id @default(uuid())

    name                    String              @unique
    multiplier              Int                 @default(0)

    asignaturas             Asignatura[]        @relation(name: "RatioAsignaturas", onDelete: CASCADE)
}

model Curso {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    identifier              String              @unique

    asignaturas             Asignatura[]        @relation(name: "CursoAsignaturas", onDelete: CASCADE)
}

model Desdoble {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    asignatura              Asignatura          @relation(name: "AsignaturaDesdobles", onDelete: NONE)
    mencion                 Mencion             @relation(name: "MencionDesdobles", onDelete: NONE)
    matriculas              Matricula[]         @relation(name: "DesdobleMatriculas", onDelete: CASCADE)
    lecciones               Leccion             @relation(name: "DesdobleLecciones", onDelete: CASCADE)
}

model Mencion {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    name                    String              @unique
    shortName               String              @unique

    desdobles               Desdoble[]          @relation(name: "MencionDesdobles", onDelete: CASCADE)
}

model Matricula {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    alumno                  User                @relation(name: "AlumnoMatriculas", onDelete: NONE)
    desdoble                Desdoble            @relation(name: "DesdobleMatriculas", onDelete: NONE)
}

model Leccion {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    name                    String 
    recurrencias            Recurrencia[]       @relation(name: "LeccionRecurrencias", onDelete: CASCADE)
    examenes                Examen[]            @relation(name: "LeccionExamenes", onDelete: CASCADE)

    desdobles               Desdoble[]          @relation(name: "DesdobleLecciones", onDelete: NONE)
    periodo                 PeriodoOperativo    @relation(name: "PeriodoOperativoLecciones", onDelete: NONE)
    sesiones                Sesion[]            @relation(name: "LeccionSesiones", onDelete: NONE)
    gestor                  User                @relation(name: "LeccionGestor", onDelete: NONE)
    profesoresDisponibles   User[]              @relation(name: "ProfesoresLecciones", onDelete: CASCADE)
}

enum WeekDay {
    DOMINGO
    LUNES
    MARTES
    MIERCOLES
    JUEVES
    VIERNES
    SABADO
}

model Recurrencia {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    leccion                 Leccion             @relation(name: "LeccionRecurrencias", onDelete: NONE)
    weekday                 WeekDay             @default(LUNES)
    timeStart               String
    timeEnd                 String
    plannedSpaces           Space[]             @relation(name: "LeccionEspaciosPlanificados", onDelete: CASCADE)
}

model ConvocatoriaExamen {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    name                    String 
    dateStart               DateTime 
    dateEnd                 DateTime 

    periodo                 PeriodoOperativo    @relation(name: "PeriodoOperativoExamenes", onDelete: NONE)
    examenes                Examen[]            @relation(name: "ConvocatoriaExamenes", onDelete: CASCADE)
}

model PeriodoOperativo {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    yearStart               Int 
    yearEnd                 Int 
    lecciones               Leccion[]           @relation(name: "PeriodoOperativoLecciones", onDelete: CASCADE)
    convocatoriasExamenes   ConvocatoriaExamen[] @relation(name: "PeriodoOperativoExamenes", onDelete: CASCADE)
}

model Examen {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    leccion                 Leccion             @relation(name: "LeccionExamenes", onDelete: NONE)
    espacio                 Space               @relation(name: "EspacioExamenes", onDelete: NONE)
    convocatoria            ConvocatoriaExamen  @relation(name: "ConvocatoriaExamenes", onDelete: NONE)
    dateTime                DateTime 
    endTime                 String 
}

model Sesion {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    leccion                 Leccion             @relation(name: "LeccionSesiones", onDelete: NONE)
    closedAt                DateTime 
    by                      User                @relation(name: "SesionesEjecutadas", onDelete: NONE)
    at                      Space               @relation(name: "EspacioSesiones", onDelete: NONE)
    asistencia              Asistencia[]        @relation(name: "SesionAsistencias", onDelete: CASCADE)
}

model Asistencia {
    id                      String              @id @default(uuid())

    atendida                Boolean             @default(false)
    dispensada              Boolean             @default(false)
    justificada             Boolean             @default(false)

    sesion                  Sesion              @relation(name: "SesionAsistencias", onDelete: NONE)
    estudiante              User                @relation(name: "EstudianteAsistencias", onDelete: NONE)  
}

// type LeccionSesiones @relationTable {
//     leccion: Leccion 
//     sesion: Sesion 
// }

// type ProfesoresLecciones @relationTable {
//     profesor: User 
//     leccion: Leccion 
// }

// type LeccionEspaciosPlanificados @relationTable {
//     recurrencia: Recurrencia 
//     espacio: Space 
// }

// ###############################################################################################################
// APP
// ###############################################################################################################

enum AppNodeStatus {
    DRAFT
    PUBLISHED
    DEFERED
}

enum NewsFeedCategories {
    NEWS
    ALERT
    CALL
}
model News {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    author                  User                @relation(name: "UserNewses", onDelete: NONE)
    title                   String 
    subtitle                String
    body                    String 
    imageURL                String?
    expiration              DateTime
    category                NewsFeedCategories  @default(NEWS)
    featured                Boolean             @default(false)
    target                  UserGroup 
    status                  AppNodeStatus       @default(DRAFT)
}

model Event {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    author                  User                @relation(name: "UserEvents", onDelete: NONE)
    title                   String 
    subtitle                String
    organizer               String?
    body                    String 
    imageURL                String?
    date                    DateTime 
    access                  String?
    accessPoint             String?
    target                  UserGroup 
    status                  AppNodeStatus       @default(DRAFT)
    place                   Space               @relation(name: "EventVenueSpace", onDelete: NONE)
}

model Venue {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    name                    String 
    address                 String 
    placeID                 String
    latitude                Float
    longitude               Float
    spaces                  Space[]             @relation(name: "VenueSpaces", onDelete: CASCADE)
}

model Space {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    name                    String 
    venue                   Venue               @relation(name: "VenueSpaces", onDelete: NONE)
    events                  Event[]             @relation(name: "EventVenueSpace", onDelete: CASCADE)
    sesiones                Sesion[]            @relation(name: "EspacioSesiones", onDelete: CASCADE)
    leccionesPlanificadas   Recurrencia[]       @relation(name: "LeccionEspaciosPlanificados", onDelete: CASCADE)
    examenes                Examen[]            @relation(name: "EspacioExamenes", onDelete: CASCADE)
}

// ###############################################################################################################
// SHARED
// ###############################################################################################################

model ContentDocument {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    creator                 User
    title                   String 
    subtitle                String
    body                    String 
    metadata                String
}

model MediaCategory {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    name                    String              @unique
    files                   Media[]             @relation(name: "CategoryMedias", onDelete: CASCADE)
}

model Media {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    uploader                User
    name                    String 
    url                     String 
    category                MediaCategory       @relation(name: "CategoryMedias", onDelete: NONE)
    metadata                String
}

// ###############################################################################################################
// STORE
// ###############################################################################################################

model ProductCategory {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    name                    String              @unique
    products                Product[]           @relation(name: "ProductCategories", onDelete: NONE)
}

model Product {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    name                    String 
    description             String 
    content                 String
    unitPrice               Float 
    category                ProductCategory     @relation(name: "ProductCategories", onDelete: NONE)
    imageURLs               String[]            @scalarList(strategy: RELATION)
    discounts               Discount[]          @relation(name: "ProductDiscounts", onDelete: CASCADE)
    orders                  Item[]              @relation(name: "ProductsInOrder")
}

model Discount {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    product                 Product             @relation(name: "ProductDiscounts", onDelete: NONE)
    name                    String 
    description             String 

    code                    String
    unitPrice               Float 
    discountRequests        DiscountRequest[]   @relation(name: "DiscountRequests", onDelete: CASCADE)

    requirements            String 
}


model DiscountRequest {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    discount                Discount            @relation(name: "DiscountRequests", onDelete: NONE)
    user                    User                @relation(name: "UserDiscountRequests", onDelete: NONE)
    applied                 Boolean             @default(false)
    approved                Boolean             @default(false)
    documentation           String[]            @scalarList(strategy: RELATION)
}

enum TxType {
    SALE
    PURCHASE
    RECEIPT
    PAYMENT
} 

model Transaction {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    type                    TxType              @default(SALE)
    reference               String                                                      // in the case of TPV transactions this field is Ds_AuthorisationCode
    order                   Order               @relation(name: "OrderTransactions", onDelete: NONE)
    amount                  Int                                                         // transaction amounts must be in cents of euro (1 / 100)
}

model Order {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    customer                User                @relation(name: "CustomerOrders", onDelete: NONE)
    items                   Item[]              @relation(name: "OrderItems", onDelete: CASCADE)
    reference               String              @unique
    metadata                String

    paymentSettled          Boolean             @default(false)
    paymentDue              DateTime
    transactions            Transaction[]       @relation(name: "OrderTransactions", onDelete: CASCADE)

    vatRate                 Int                 @default(0)
    total                   Float 
}

model Item {
    id                      String              @id @default(uuid())
    createdAt               DateTime            @default(now())
    updatedAt               DateTime            @updatedAt

    order                   Order               @relation(name: "OrderItems", onDelete: NONE)
    product                 Product             @relation(name: "ProductsInOrder", onDelete: NONE)
    discount                Discount?
    quantity                Int 
    orderPrice              Float                                                       // this price either from a product or a discount
}

### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


"""
Authorization payload token with the key required for the mutation action requested
"""
type AuthPayload {
  token: String!
}

type Mutation {
  approveGroupRequest(email: String!): AuthPayload!

  """
  Changes the password of the account whose reset request matches the provided key.
  """
  changePassword(key: String!, newPassword: String!): AuthPayload!
  createGroupRequest(groupRequest: UserGroup!): AuthPayload!

  """
  Login a registered user.
                    Returns the token required for authentication.
  """
  login(email: String!, password: String!): AuthPayload!
  rejectGroupRequest(email: String!): AuthPayload!

  """
  Creates a reset password request, locks the account requested, and sends an
  email to the requestee with a link to create a new password.
                    Returns the key to restore the password.
  """
  requestResetPassword(email: String!): AuthPayload!

  """
  Signs up a new user.
                    Returns the token required to verify its email account.
  """
  signUpUser(email: String!, firstname: String!, groupRequest: UserGroup, lastname: String!, password: String!): AuthPayload!
}

type Query {
  """Query data of the currently authenticated user"""
  me: User!
}

"""Registered user"""
type User {
  email: String!
  emailVerified: Boolean!
  firstname: String!
  group: UserGroup!
  groupRequest: UserGroup
  id: UUID!
  isAdmin: Boolean!
  lastname: String!
  password: String!
}

"""Basic root groups of @alicialonso registered users"""
enum UserGroup {
  PUBLIC
  STAFF
  STUDENT
}

scalar UUID
